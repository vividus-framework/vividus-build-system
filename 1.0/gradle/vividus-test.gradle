/*
 * Copyright 2019-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: "${gradleScriptDir}/vividus-library.gradle"

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 10, 'minutes'
}



spotless {
    format 'Vividus', {
        target fileTree(rootDir) {
            include '**/*.story', '**/*.steps', '**/*.table'
            exclude gitignorePatterns
        }

        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
}



apply plugin: 'java-library-distribution'

distributions {
    main {
        contents {
            from(buildSystemDir) {
                include 'scripts/*'
            }
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            afterEvaluate {
                if (distZip.enabled) {
                    artifact distZip
                }
                if (distTar.enabled) {
                    artifact distTar
                }
                if (distSourcesZip.enabled) {
                    artifact distSourcesZip
                }
                if (storiesJar.enabled) {
                    artifact storiesJar
                }
            }
            pom {
                // Reset POM attributes for test projects
                inceptionYear = null
                licenses.clear()
            }
        }
    }
}

task storiesJar(type: Jar) {
    archiveClassifier = 'stories'
    from (sourceSets.main.resources) {
        exclude 'properties/configuration.properties'
    }
}

import org.apache.tools.ant.DirectoryScanner
task distSourcesZip(type: Zip) {
     archiveClassifier = 'sources'
    //workaround for https://issues.gradle.org/browse/GRADLE-1883
    doFirst {
        DirectoryScanner.defaultExcludes.each { if(it.contains('.gitignore')){DirectoryScanner.removeDefaultExclude it }}
    }
    from (project.getProjectDir()) {
        exclude '.gradle/**'
        exclude '.settings/**'
        exclude '.classpath'
        exclude 'bin/**'
        exclude 'output/**'
    }
}

distSourcesZip.enabled = false
distTar.enabled = true
distZip.enabled = false
storiesJar.enabled = false



class VividusTask extends JavaExec {
    String[] arguments;
}

task testVividusInitialization (dependsOn: test, type: VividusTask, group: 'Vividus') {
    description = 'Performs Vividus initialization.'
    main = 'org.vividus.runner.VividusInitializationChecker'
    arguments = ['ignoreBeans']
}
build.dependsOn testVividusInitialization

task runStories (dependsOn: build, type: JavaExec, group: 'Vividus') {
    description = 'Runs stories.'
    main = 'org.vividus.runner.StoriesRunner'
    doFirst {
        environment 'CLASSPATH', sourceSets.main.runtimeClasspath.asPath // Workaround for Windows-specific issue: classpath is too long
        systemProperties (
            ['vividus.output.directory': "${project.buildDir}"]
                + project.properties.findAll({k,v -> k.startsWith('vividus.')})
        )
    }
}

task printSteps (dependsOn: build, type: VividusTask, group: 'Vividus') {
    description = 'Prints available steps in alphabetical order.'
    main = 'org.vividus.runner.BddStepPrinter'
    arguments = ['file']
}

task validateKnownIssues (dependsOn: build, type: JavaExec, group: 'Vividus') {
    description = 'Validates known-issues configuration.'
    main = 'org.vividus.runner.KnownIssueValidator'
}

task countScenarios (dependsOn: build, type: JavaExec, group: 'Vividus') {
    description = 'Counts scenarios in project.'
    main = 'org.vividus.runner.BddScenariosCounter'
}

task countSteps (dependsOn: build, type: JavaExec, group: 'Vividus') {
    description = 'Counts steps in project.'
    main = 'org.vividus.runner.BddStepsCounter'
}

[testVividusInitialization, printSteps, validateKnownIssues, countScenarios, countSteps].each { task ->
    task.doFirst {
        main = task.property('main')
        environment 'CLASSPATH', sourceSets.main.runtimeClasspath.asPath // Workaround for Windows-specific issue: classpath is too long
        if (task.hasProperty('arguments')) {
            task.property('arguments').each { arg ->
                if (project.hasProperty(arg)) {
                    args('--' + arg, project.property(arg));
                }
            }
        }
    }
}
